import numpy as np
import numpy.ma as ma
import h5py
import sys
import argparse
sys.path.append('/home/a/antonio-costa/theory_manuscript/')
import operator_calculations as op_calc
import delay_embedding as embed
import clustering_methods as cl

def main(argv):
    parser = argparse.ArgumentParser()
    parser.add_argument('-n_seeds','--N',help="Number of states",default=1000,type=int)
    args=parser.parse_args()
    n_clusters = args.N

    K_star=10
    m_star=7
        
    print('Getting embedding results...')

    f = h5py.File('/home/a/antonio-costa/entropy_estimation/Foraging/data/phspace_K_{}_m_{}.h5'.format(K_star,m_star),'r')
    phspace = np.array(f['phspace'])
    phspace = ma.masked_invalid(phspace) 
    phspace[ma.any(phspace==0,axis=1)] = ma.masked
    traj_matrix = np.array(f['traj_matrix'])
    traj_matrix = ma.masked_invalid(traj_matrix)
    traj_matrix[ma.any(traj_matrix==0,axis=1)] = ma.masked
    f.close()
    
    print('Partitioning...')
    
    labels_traj,centers_traj = cl.kmeans_knn_partition(traj_matrix,n_seeds=n_clusters,return_centers=True)
    labels_phspace,centers_phspace = cl.kmeans_knn_partition(phspace,n_seeds=n_clusters,return_centers=True)
    f = h5py.File('/home/a/antonio-costa/entropy_estimation/Foraging/symbol_sequences/labels_{}_clusters.h5'.format(n_clusters),'w')
    ltraj_ = f.create_dataset('labels_traj',labels_traj.shape)
    ltraj_[...] = labels_traj
    mtraj_ = f.create_dataset('mask_traj',labels_traj.shape,dtype=bool)
    mtraj_[...] = labels_traj.mask
    ctraj_ = f.create_dataset('centers_traj',centers_traj.shape)
    ctraj_[...] = centers_traj
    lp_ = f.create_dataset('labels_phspace',labels_phspace.shape)
    lp_[...] = labels_phspace
    mp_ = f.create_dataset('mask_phspace',labels_phspace.shape,dtype=bool)
    mp_[...] = labels_phspace.shape
    cp_ = f.create_dataset('centers_phspace',centers_phspace.shape)
    cp_[...] = centers_phspace
    f.close()

        
if __name__ == "__main__":
    main(sys.argv)
